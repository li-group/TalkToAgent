import os
import ast
import numpy as np
from dotenv import load_dotenv
from openai import OpenAI

from prompts import get_system_description, get_prompts
from utils import py2str, str2py, py2func

from params import running_params, env_params

running_params = running_params()
env, env_params = env_params(running_params['system'])

# LLM settings
load_dotenv()
api_key = os.getenv("OPENAI_API_KEY")
client = OpenAI(api_key=api_key)
MODEL = 'gpt-4.1'


class Evaluator:
    def __init__(self):
        self.history = []
    def evaluate(self, CF_policy):
        """
        Evaluate the code generated by Coding agent (Policy_generator | Reward_decomposer) and returns suggestions for modification.
        Returns:
            new_reward_f (Callable): Decomposed reward function
            component_label (list): List of component labels
        """
        try:
            # Running the simulation with counterfactual policy
            step_index = int(t_query // env_params['delta_t'])
            cf_settings = {
                'CF_mode': 'policy',
                'step_index': step_index,
                'CF_policy': CF_policy
            }
            evaluator, data_cf = env.get_rollouts({'Counterfactual': agent}, reps=1, get_Q=False, cf_settings=cf_settings)

            success = True
        except Exception as e:
            attempt += 1
            error_message = traceback.format_exc()

            print(f"[Evaluator] Error during rollout (attempt {attempt}):\n{error_message}")

            # coder agent에게 에러 메시지 전달
            coder_prompt = f"""
            You previously generated the following code for a counterfactual policy:

            {CF_policy}

            However, the following error occurred during simulation:

            {error_message}

            Please revise the code to fix the error. Only return the corrected function code.
            """

            # OpenAI API를 통한 코드 수정 요청
            response = openai.ChatCompletion.create(
                model="gpt-4",
                messages=[
                    {"role": "system", "content": "You are a coding assistant that writes Python control logic."},
                    {"role": "user", "content": coder_prompt}
                ],
                temperature=0.2
            )

            # 새로운 코드 업데이트
            CF_policy = response['choices'][0]['message']['content']

        print("[Evaluator] Rollout complete." if success else "[Evaluator] Failed after multiple attempts.")


        evaluator_prompt = """
        You are a coding expert that generates rule-based control logic, based on user queries.
        Your job is to write a code for the following Python class structure, named 'CF_policy': 
    
    
        Please consider the following points when writing the 'predict' method:
        - The output of the 'predict' method (i.e., the action) should be within the range \[-1,1\], as it will be used by an external function that expects scaled values.
            You can scale the actions values by using the method: 'self.env._scale_U(u)', if needed.
        - The input 'state' is also scaled. Ensure that your if-then logic works with scaled variables.
            To scale raw state values, you may use: 'self.env._scale_X(x)'.
        - If your code requires any additional Python modules, make sure to import them at the beginning of your code.
        - Only return the 'CF_policy' class, without "'''" or "'''python".
    
        For accurate policy generation, here are some descriptions of the control system:
        {system_description}
    
        You will get a great reward if you correctly generate the counterfactual policy function!
        """

        messages = [
            {"role": "system", "content": evaluator_prompt.format(
                system_description=get_system_description(running_params['system']),
            )},
            {"role": "user", "content": f"Would you make a controller policy that satisfies the requirements below:"
                                        f"{message}"
             }
        ]

        response = client.chat.completions.create(
            model=MODEL,
            messages=messages,
        )

        content = response.choices[0].message.content

        dec_code = content

        str2py(dec_code, file_path=f'./explainer/reward_fs/CF_policy.py')
        CF_policy = py2func(f'./explainer/reward_fs/CF_policy.py', 'CF_policy')(env)
        return CF_policy

def check_reward_consistency(original_fn, decomposed_fn, x, u, con):
    r_scalar = original_fn(x, u, con)
    r_components = decomposed_fn(x, u, con)
    return np.isclose(r_scalar, sum(r_components), atol=1e-5)



