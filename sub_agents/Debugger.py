from prompts import get_system_description
from params import get_running_params, get_env_params, get_LLM_configs

running_params = get_running_params()
env, env_params = get_env_params(running_params['system'])
client, MODEL = get_LLM_configs()

# %% Debugger agent
class Debugger:
    def __init__(self):
        self.history = []

    def debug(self, orig_code, error_message):
        """
        Analyze the error based on the code generated by Coder agent and return suggestions for modification.
        Args:
            orig_code (str): Original code
            error_message (str): Error message
        Returns:
            guidance (str): Guidance message
        """

        debugger_prompt = """
        You are a coding expert that provides proper guidance to the coder agent,
        to refine the generated code properly and solve the error issue. 
        
        For accurate debugging, here are some descriptions of the control system:
        {system_description}
        
        Also, environment parameters used in process control:
        {env_params}
    
        You will get a great reward if you correctly guide the coder agent to refine accurately!
        """

        messages = [
            {"role": "system", "content": debugger_prompt.format(
                system_description=get_system_description(running_params['system']),
                env_params=vars(env)
            )},
            {"role": "user", "content": f"""
            What should the coder agent do in order to solve this error message?
            
            Original code:
            {orig_code}
            
            Error message:
            {error_message}
            """
             }
        ]

        response = client.chat.completions.create(
            model=MODEL,
            messages=messages,
        )

        guidance = response.choices[0].message.content

        return guidance
